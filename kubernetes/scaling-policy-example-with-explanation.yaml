apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-resource-metrics-memory
  namespace: default
spec:
...
  minReplicas: 20
...
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 4
        periodSeconds: 30
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Max
    scaleUp:
      selectPolicy: Disabled
      
# In this example, when the number of pods is greater than 40, the percent-based policy is used for scaling down, 
# as that policy results in a larger change, as required by the selectPolicy.

# If there are 80 pod replicas, in the first iteration the HPA reduces the pods by 8, which is 10% of the 80 pods 
# (based on the type: Percent and value: 10 parameters), over one minute (periodSeconds: 60). For the next iteration, 
# the number of pods is 72. The HPA calculates that 10% of the remaining pods is 7.2, which it rounds up to 8 and scales down 8 pods. 
# On each subsequent iteration, the number of pods to be scaled is re-calculated based on the number of remaining pods. 
# When the number of pods falls below 40, the pods-based policy is applied, because the pod-based number is greater than the percent-based number. 
# The HPA reduces 4 pods at a time (type: Pods and value: 4), over 30 seconds (periodSeconds: 30), until there are 20 replicas remaining (minReplicas).

# The selectPolicy: Disabled parameter prevents the HPA from scaling up the pods. You can manually scale up by adjusting the number of replicas 
# in the replica set or deployment set, if needed.