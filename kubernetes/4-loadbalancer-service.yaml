# Service is a resource which is created to make a single and fixed point of entry to a group of pods providing the same Service.
# A LoadBalancer service is the standard way to expose a service to the internet. With this method, each service gets its own IP address.
# LoadBalancer exposes the service externally using a cloud provider loadbalancer
# LoadBalancer services are ideal where high availability and scalability are critical for applications that need to handle high traffic volumes.
# When we create a LoadBalancer service, Kubernetes provisions a load balancer in cloud environment and forwards the traffic to the nodes running the service.
# After creating the LoadBalancer service, Kubernetes provisions a load balancer in the cloud environment with a public IP address. 
# We can use this IP address to access our application from outside the cluster.

# Services of type LoadBalancer can be exposed via the minikube tunnel command
#     minikube tunnel & (the service is accessible through 127.0.0.1:8080) (in local environment we don't need MetalLB)
apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: rest-api-laod-balancer-service
spec:
  selector:
    app: rest-api # a selector that targets pods labeled with app: rest-api
  type: LoadBalancer # provides an externally-accessible IP address that sends traffic to the correct port on your cluster nodes
  ports:
    - protocol: "TCP" # Supported protocols for Service port: TCP (the default), UDP, SCTP.
      port: 8080 # The service exposes port 8080, which is the port used by clients to access the service
      targetPort: 8080 # The service forwards the traffic to the pods' port 8080
